- import OneChatWeb.Admin.Page.Role
- item = @changeset.data
- action = item.id
- attrs = scope_attrs(item.name)
- scoped = item.scope != "global"
- scope = item.scope
section.page-container.page-home.page-static.admin-settings
  header.fixed-title.border-component-color
    = render OneChatWeb.MasterView, "burger.html"
    h2
      = if action do
        span.room-title= gettext("Edit Role %{name}", name: item.name)
      - else
        span.room-title= ~g"New Role"
    .submit
      = if action && attrs[:disabled] != true do
        button.button.danger.delete.admin-role(data-name="#{item.name}")
          i.icon.delete
          span = ~g(Delete)
      button.button.primary.save(disabled="true")
        i.icon-send
        span= ~g"Save changes"
  .content
    a.back-permission href="/admin/permissions" = ~g(Back to permissions)
    br
    br
    = form_for @changeset, "#", [id: "admin-roles-form", class: "inline form-role", "data-id": "admin-role"], fn f ->
      = hidden_input f, :id, value: item.id
      .rocket-form
        .input-line
          = label f, :name
          = if action do
            = text_input f, :name, style: "width: 100%;", disabled: true
          - else
            = text_input f, :name, style: "width: 100%;"
        .input-line
          = label f, :description
          = text_input f, :description, style: "width: 100%;"
        .input-line
          = label f, :scope
          .select-control
            .select-arrow
              i.icon-down-open.secondary-font-color
            =# select f, :scope, ["Global": "global", "Rooms": "rooms", "Pages": "pages"], attrs
            = select f, :scope, ["Global": "global", "Rooms": "rooms"], attrs
    = if action do
      = if scoped do
        - str_scope = to_string(scope)
        - singular_scope = Inflex.singularize(str_scope)
        .choose-room
          label = gettext("Choose a %{scope}", scope: singular_scope)
          - place_holder = gettext("Enter a %{scope} name", scope: singular_scope)
          input.search#search-room type="text" autocomplete="off" placeholder="#{place_holder}" rebel-keydown="admin_user_role_search_channel"
          div class="-autocomplete-container #{scope}"
      #user-roles-container data-role="#{item.name}"
        = if !scoped do
          = render "permissions_user_roles_container.html", item: item, scope: scope
