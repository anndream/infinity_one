- settings = @notification.settings
- import OneChat.NotificationSetting, only: [options: 1, options_select: 1, option_text: 2]
.content.notifications
  = render "flex_close_button.html"
  .list-view.push-notifications
    .title
      h2= ~g"Notifications"
    = form_for OneChat.Schema.Notification.changeset(@notification, %{}), "#", fn f ->
      / Pass the id field indicating which tab the form is for
      input(type="hidden" name="flex-id" value="notifications")
      = hidden_input f, :id
      = inputs_for f, :settings, fn fp ->
        ul.list.clearfix
          li
            label= ~g"Audio"
            div
              = if @editing == "audio" do
                = notification_radio_button fp, :audio_mode, options(:audio_mode)
                br
                label= select fp, :audio, options_select(:audio), "rebel-change": "flex_call", "data-id": "notifications", "data-fun": "change_audio"
                = notification_save_cancel()
              - else
                span.current-setting
                  = "#{option_text options(:audio_mode), settings.audio_mode}: "
                  = option_text options(:audio), settings.audio
                  i.icon-play-circled(data-play="audio" rebel-click="flex_call" data-fun="play" data-id="notifications")
                  i.icon-pencil(data-edit="audio" rebel-click="flex_form")
          li
            label= ~g"Desktop"
            div
              = if @editing == "desktop" do
                = notification_radio_button fp, :desktop, options(:desktop)
                br
                = if settings.duration do
                  label
                    = ~g"Duration" <> " (" <> ~g"seconds" <> ")"
                    = text_input fp, :duration, type: :number, class: "content-background-color", min: "0"
                - else
                  label
                    = ~g"Duration" <> " (" <> ~g"seconds" <> ")"
                    - placeholder = ~g(Use User Preferences or Global Settings)
                    = text_input fp, :duration, type: :number, class: "content-background-color", placeholder: placeholder, min: ""
                = notification_save_cancel()
              - else
                span.current-setting
                  = option_text options(:desktop), settings.desktop
                  i.icon-pencil(data-edit="desktop" rebel-click="flex_form")
          = unless @editing == "desktop" do
            li
              label= ~g"Desktop Notifications Duration"
              div
                span.current-setting
                  = if settings.duration do
                    = "#{settings.duration} " <> ~g"seconds"
                  - else
                    = ~g"Use User Preferences or Global Settings"
          li
            label= ~g"Mobile (unsupported)"
            div
              = if @editing == "mobile" do
                = notification_radio_button fp, :mobile, options(:mobile)
                = notification_save_cancel()
              - else
                span.current-setting
                  = option_text options(:mobile), settings.mobile
                  i.icon-pencil(data-edit="mobile" rebel-click="flex_form")
          li
            label= ~g"Email (unsupported)"
            div
              = if @editing == "email" do
                = notification_radio_button fp, :email, options(:email)
                = notification_save_cancel()
              - else
                span.current-setting
                  = option_text options(:email), settings.email
                  i.icon-pencil(data-edit="email" rebel-click="flex_form")

          -# if :email_no_verified do
          li
            .alert.alert-warning.pending-background.pending-border
              = ~g"You wont receive email notifications because you have not verified your email"

          li
            label= ~g"Unread Alert (unsupported)"
            div
              = if @editing == "unread_alert" do
                = notification_radio_button fp, :unread_alert, options(:unread_alert)
                = notification_save_cancel()
              - else
                span.current-setting
                  = option_text options(:unread_alert), settings.unread_alert
                  i.icon-pencil(data-edit="unread_alert" rebel-click="flex_form")
