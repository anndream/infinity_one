diff -Nur ./confirmation_controller.ex /Users/spallen/myprojects/elixir/ucx_chat/web/controllers/coherence/confirmation_controller.ex
--- ./confirmation_controller.ex	2017-05-02 16:45:29.000000000 -0400
+++ /Users/spallen/myprojects/elixir/ucx_chat/web/controllers/coherence/confirmation_controller.ex	2017-05-09 15:08:28.000000000 -0400
@@ -1,20 +1,19 @@
-defmodule InfinityOneWeb.Coherence.ConfirmationController do
+defmodule UcxChat.Coherence.ConfirmationController do
   @moduledoc """
   Handle confirmation actions.

   A single action, `edit`, is required for the confirmation module.

   """
-  use InfinityOneWeb.Coherence, :controller
-
-  alias Coherence.{ConfirmableService}
-  alias Ecto.DateTime
-
+  use Coherence.Web, :controller
   require Logger
+  use Timex
+  alias Coherence.ControllerHelpers, as: Helpers
+  alias Coherence.{ConfirmableService}

   plug Coherence.ValidateOption, :confirmable

-  plug :layout_view, view: Coherence.ConfirmationView
+  plug :layout_view
   plug :redirect_logged_in when action in [:new]

   @doc """
@@ -37,21 +36,19 @@
   def create(conn, %{"confirmation" => password_params} = params) do
     user_schema = Config.user_schema
     email = password_params["email"]
-    user =
-      user_schema
-      |> where([u], u.email == ^email)
-      |> Config.repo.one
+    user = where(user_schema, [u], u.email == ^email)
+    |> Config.repo.one

     changeset = Helpers.changeset :confirmation, user_schema, user_schema.__struct__
     case user do
       nil ->
         conn
-        |> put_flash(:error, dgettext("coherence", "Could not find that email address"))
+        |> put_flash(:error, "Could not find that email address")
         |> render("new.html", changeset: changeset)
       user ->
         if user_schema.confirmed?(user) do
           conn
-          |> put_flash(:error, dgettext("coherence", "Account already confirmed."))
+          |> put_flash(:error, "Account already confirmed.")
           |> render(:new, [email: "", changeset: changeset])
         else
           conn
@@ -71,35 +68,32 @@
   def edit(conn, params) do
     user_schema = Config.user_schema
     token = params["id"]
-    user =
-      user_schema
-      |> where([u], u.confirmation_token == ^token)
-      |> Config.repo.one
-
+    user = where(user_schema, [u], u.confirmation_token == ^token)
+    |> Config.repo.one
     case user do
       nil ->
         changeset = Helpers.changeset :confirmation, user_schema, user_schema.__struct__
         conn
-        |> put_flash(:error, dgettext("coherence", "Invalid confirmation token."))
+        |> put_flash(:error, "Invalid confirmation token.")
         |> redirect_to(:confirmation_edit_invalid, params)
       user ->
         if ConfirmableService.expired? user do
           conn
-          |> put_flash(:error, dgettext("coherence", "Confirmation token expired."))
+          |> put_flash(:error, "Confirmation token expired.")
           |> redirect_to(:confirmation_edit_expired, params)
         else
           changeset = Helpers.changeset(:confirmation, user_schema, user, %{
             confirmation_token: nil,
-            confirmed_at: DateTime.utc,
+            confirmed_at: Ecto.DateTime.utc,
             })
           case Config.repo.update(changeset) do
             {:ok, _user} ->
               conn
-              |> put_flash(:info, dgettext("coherence", "User account confirmed successfully."))
+              |> put_flash(:info, "User account confirmed successfully.")
               |> redirect_to(:confirmation_edit, params)
             {:error, _changeset} ->
               conn
-              |> put_flash(:error, dgettext("coherence", "Problem confirming user account. Please contact the system administrator."))
+              |> put_flash(:error, "Problem confirming user account. Please contact the system administrator.")
               |> redirect_to(:confirmation_edit_error, params)
           end
         end
diff -Nur ./invitation_controller.ex /Users/spallen/myprojects/elixir/ucx_chat/web/controllers/coherence/invitation_controller.ex
--- ./invitation_controller.ex	2017-05-02 16:45:29.000000000 -0400
+++ /Users/spallen/myprojects/elixir/ucx_chat/web/controllers/coherence/invitation_controller.ex	2017-05-09 15:08:28.000000000 -0400
@@ -1,4 +1,4 @@
-defmodule InfinityOneWeb.Coherence.InvitationController do
+defmodule UcxChat.Coherence.InvitationController do
   @moduledoc """
   Handle invitation actions.

@@ -10,17 +10,22 @@
   * create_user - create a new user database record
   * resend - resend an invitation token email
   """
-  use InfinityOneWeb.Coherence, :controller
-
-  import Ecto.Changeset
-
+  use Coherence.Web, :controller
+  use Timex
   alias Coherence.{Config, Invitation}
-
+  alias Coherence.ControllerHelpers, as: Helpers
+  import Ecto.Changeset
   require Logger

   plug Coherence.ValidateOption, :invitable
   plug :scrub_params, "user" when action in [:create_user]
-  plug :layout_view, view: Coherence.InvitationView
+  plug :set_layout_view
+
+  def set_layout_view(conn, _ \\ []) do
+    conn
+    |> put_view(Coherence.InvitationView)
+    |> put_layout({Coherence.LayoutView, "app.html"})
+  end

   @type schema :: Ecto.Schema.t
   @type conn :: Plug.Conn.t
@@ -52,35 +57,29 @@
         token = random_string 48
         url = router_helpers().invitation_url(conn, :edit, token)
         cs = put_change(cs, :token, token)
-        do_insert(conn, cs, url, params, email)
+        case Config.repo.insert cs do
+          {:ok, invitation} ->
+            send_user_email :invitation, invitation, url
+            conn
+            |> put_flash(:info, "Invitation sent.")
+            |> redirect_to(:invitation_create, params)
+          {:error, changeset} ->
+            {conn, changeset} = case repo.one from i in Invitation, where: i.email == ^email do
+              nil -> {conn, changeset}
+              invitation ->
+                {assign(conn, :invitation, invitation), add_error(changeset, :email, "Invitation already sent.")}
+            end
+            render(conn, "new.html", changeset: changeset)
+        end
       _ ->
         cs = cs
-        |> add_error(:email, dgettext("coherence", "User already has an account!"))
+        |> add_error(:email, "User already has an account!")
         |> struct(action: true)
         conn
         |> render("new.html", changeset: cs)
     end
   end

-  defp do_insert(conn, cs, url, params, email) do
-    repo = Config.repo()
-    case repo.insert cs do
-      {:ok, invitation} ->
-        send_user_email :invitation, invitation, url
-        conn
-        |> put_flash(:info, dgettext("coherence", "Invitation sent."))
-        |> redirect_to(:invitation_create, params)
-      {:error, changeset} ->
-        {conn, changeset} =
-          case repo.one from i in Invitation, where: i.email == ^email do
-            nil -> {conn, changeset}
-            invitation ->
-              {assign(conn, :invitation, invitation), add_error(changeset, :email, dgettext("coherence", "Invitation already sent."))}
-          end
-        render(conn, "new.html", changeset: changeset)
-    end
-  end
-
   @doc """
   Render the create user template.

@@ -96,14 +95,23 @@
     |> case do
       nil ->
         conn
-        |> put_flash(:error, dgettext("coherence", "Invalid invitation token."))
+        |> put_flash(:error, "Invalid invitation token.")
         |> redirect(to: logged_out_url(conn))
       invite ->
         user_schema = Config.user_schema
+        name = String.trim(invite.name)
+        {name, username} =
+          if String.contains? name, " " do
+            username = String.split(name, " ", trim: true) |> Enum.join(".") |> String.downcase
+            {name, username}
+          else
+            username = name
+            name = name |> String.split(".") |> Enum.map(&String.capitalize/1) |> Enum.join(" ")
+            {name, username}
+          end
         cs = Helpers.changeset(:invitation, user_schema, user_schema.__struct__,
-          %{email: invite.email, name: invite.name})
-        conn
-        |> render(:edit, changeset: cs, token: invite.token)
+          %{email: invite.email, username: username, name: name})
+        render(conn, :edit, changeset: cs, token: invite.token)
     end
   end

@@ -123,18 +131,19 @@
     |> case do
       nil ->
         conn
-        |> put_flash(:error, dgettext("coherence", "Invalid Invitation. Please contact the site administrator."))
+        |> put_flash(:error, "Invalid Invitation. Please contact the site administrator.")
         |> redirect(to: logged_out_url(conn))
       invite ->
-        changeset = Helpers.changeset(:invitation, user_schema, user_schema.__struct__, params["user"])
-        case repo.insert changeset do
+        case UcxChat.UserService.insert_user(params["user"]) do
           {:ok, user} ->
+            # Logger.warn "user: #{inspect user}"
             repo.delete invite
             conn
             |> send_confirmation(user, user_schema)
             |> redirect(to: logged_out_url(conn))
-          {:error, changeset} ->
-            render conn, "edit.html", changeset: changeset, token: token
+          {:error, :user, error, _} ->
+            # Logger.warn "error: #{inspect error}"
+            render conn, "edit.html", changeset: error, token: token
         end
     end
   end
@@ -145,17 +154,17 @@
   Resent the invitation based on the invitation's id.
   """
   @spec resend(conn, params) :: conn
-  def resend(conn, %{"id" => id} = params) do
-    conn = case Config.repo.get(Invitation, id) do
+  def resend(conn, %{"id" => id}) do
+    case Config.repo.get(Invitation, id) do
       nil ->
         conn
-        |> put_flash(:error, dgettext("coherence", "Can't find that token"))
+        |> put_flash(:error, "Can't find that token")
       invitation ->
         send_user_email :invitation, invitation,
           router_helpers().invitation_url(conn, :edit, invitation.token)
-        put_flash conn, :info, dgettext("coherence", "Invitation sent.")
+        put_flash conn, :info, "Invitation sent."
     end
-    redirect_to(conn, :invitation_resend, params)
+    |> redirect(to: logged_out_url(conn))
   end

 end
diff -Nur ./password_controller.ex /Users/spallen/myprojects/elixir/ucx_chat/web/controllers/coherence/password_controller.ex
--- ./password_controller.ex	2017-05-02 16:45:29.000000000 -0400
+++ /Users/spallen/myprojects/elixir/ucx_chat/web/controllers/coherence/password_controller.ex	2017-05-09 15:08:28.000000000 -0400
@@ -1,4 +1,4 @@
-defmodule InfinityOneWeb.Coherence.PasswordController do
+defmodule UcxChat.Coherence.PasswordController do
   @moduledoc """
   Handle password recovery actions.

@@ -11,19 +11,25 @@
   * edit - render the reset password form
   * update - verify password, password confirmation, and update the database
   """
-  use InfinityOneWeb.Coherence, :controller
-
-  alias Coherence.TrackableService
-
+  use Coherence.Web, :controller
   require Logger
+  use Timex
+  alias Coherence.ControllerHelpers, as: Helpers
+  alias Coherence.TrackableService

-  plug :layout_view, view: Coherence.PasswordView
+  plug :set_layout_view
   plug :redirect_logged_in when action in [:new, :create, :edit, :update]

   @type schema :: Ecto.Schema.t
   @type conn :: Plug.Conn.t
   @type params :: Map.t

+  def set_layout_view(conn, _ \\ []) do
+    conn
+    |> put_view(Coherence.PasswordView)
+    |> put_layout({Coherence.LayoutView, "app.html"})
+  end
+
   @doc """
   Render the recover password form.
   """
@@ -51,7 +57,7 @@
       nil ->
         changeset = Helpers.changeset :password, user_schema, user_schema.__struct__
         conn
-        |> put_flash(:error, dgettext("coherence", "Could not find that email address"))
+        |> put_flash(:error, "Could not find that email address")
         |> render("new.html", changeset: changeset)
       user ->
         token = random_string 48
@@ -65,7 +71,7 @@
         send_user_email :password, user, url

         conn
-        |> put_flash(:info, dgettext("coherence", "Reset email sent. Check your email for a reset link."))
+        |> put_flash(:info, "Reset email sent. Check your email for a reset link.")
         |> redirect_to(:password_create, params)
     end
   end
@@ -84,16 +90,15 @@
     case user do
       nil ->
         conn
-        |> put_flash(:error, dgettext("coherence", "Invalid reset token."))
+        |> put_flash(:error, "Invalid reset token.")
         |> redirect(to: logged_out_url(conn))
       user ->
         if expired? user.reset_password_sent_at, days: Config.reset_token_expire_days do
-          :password
-          |> Helpers.changeset(user_schema, user, clear_password_params())
+          Helpers.changeset(:password, user_schema, user, clear_password_params())
           |> Config.repo.update

           conn
-          |> put_flash(:error, dgettext("coherence", "Password reset token expired."))
+          |> put_flash(:error, "Password reset token expired.")
           |> redirect(to: logged_out_url(conn))
         else
           changeset = Helpers.changeset(:password, user_schema, user)
@@ -118,30 +123,21 @@
     case user do
       nil ->
         conn
-        |> put_flash(:error, dgettext("coherence", "Invalid reset token"))
+        |> put_flash(:error, "Invalid reset token")
         |> redirect(to: logged_out_url(conn))
       user ->
-        if expired? user.reset_password_sent_at, days: Config.reset_token_expire_days do
-          Helpers.changeset(:password, user_schema, user, clear_password_params())
-          |> Config.repo.update
-
-          conn
-          |> put_flash(:error, dgettext("coherence", "Password reset token expired."))
-          |> redirect(to: logged_out_url(conn))
-        else
-          params = password_params
-          |> clear_password_params
-          cs = Helpers.changeset(:password, user_schema, user, params)
-          case repo.update(cs) do
-            {:ok, user} ->
-              conn
-              |> TrackableService.track_password_reset(user, user_schema.trackable_table?)
-              |> put_flash(:info, dgettext("coherence", "Password updated successfully."))
-              |> redirect_to(:password_update, params)
-            {:error, changeset} ->
-              conn
-              |> render("edit.html", changeset: changeset)
-          end
+        params = password_params
+        |> clear_password_params
+        cs = Helpers.changeset(:password, user_schema, user, params)
+        case repo.update(cs) do
+          {:ok, user} ->
+            conn
+            |> TrackableService.track_password_reset(user, user_schema.trackable_table?)
+            |> put_flash(:info, "Password updated successfully.")
+            |> redirect_to(:password_update, params)
+          {:error, changeset} ->
+            conn
+            |> render("edit.html", changeset: changeset)
         end
     end
   end
@@ -151,4 +147,5 @@
     |> Map.put("reset_password_token", nil)
     |> Map.put("reset_password_sent_at", nil)
   end
+
 end
diff -Nur ./redirects.ex /Users/spallen/myprojects/elixir/ucx_chat/web/controllers/coherence/redirects.ex
--- ./redirects.ex	2017-05-02 16:45:29.000000000 -0400
+++ /Users/spallen/myprojects/elixir/ucx_chat/web/controllers/coherence/redirects.ex	2017-05-09 15:08:28.000000000 -0400
@@ -29,26 +29,26 @@

   ## Examples

-      import MyProject.Web.Router.Helpers
+      import MyProject.Router.Helpers

       # override the log out action back to the log in page
-      def session_delete(conn, _), do: redirect(conn, to: session_path(conn, :new))
+      def session_delete(conn, _), do: redirect(conn, session_path(conn, :new))

       # redirect the user to the login page after registering
-      def registration_create(conn, _), do: redirect(conn, to: session_path(conn, :new))
+      def registration_create(conn, _), do: redirect(conn, session_path(conn, :new))

       # disable the user_return_to feature on login
-      def session_create(conn, _), do: redirect(conn, to: landing_path(conn, :index))
+      def session_create(conn, _), do: redirect(conn, landing_path(conn, :index))

   """
   use Redirects
   # Uncomment the import below if adding overrides
-  # import InfinityOneWeb.Router.Helpers
+  # import <%= base %>.Router.Helpers

   # Add function overrides below

   # Example usage
   # Uncomment the following line to return the user to the login form after logging out
-  # def session_delete(conn, _), do: redirect(conn, to: session_path(conn, :new))
+  # def session_delete(conn, _), do: redirect(conn, session_path(conn, :new))

 end
diff -Nur ./registration_controller.ex /Users/spallen/myprojects/elixir/ucx_chat/web/controllers/coherence/registration_controller.ex
--- ./registration_controller.ex	2017-05-02 16:45:29.000000000 -0400
+++ /Users/spallen/myprojects/elixir/ucx_chat/web/controllers/coherence/registration_controller.ex	2017-05-09 17:17:31.000000000 -0400
@@ -1,4 +1,4 @@
-defmodule InfinityOneWeb.Coherence.RegistrationController do
+defmodule UcxChat.Coherence.RegistrationController do
   @moduledoc """
   Handle account registration actions.

@@ -10,13 +10,9 @@
   * update - update the user account
   * delete - delete the user account
   """
-  use InfinityOneWeb.Coherence, :controller
-
+  use Coherence.Web, :controller
   require Logger
-
-  @type schema :: Ecto.Schema.t
-  @type conn :: Plug.Conn.t
-  @type params :: Map.t
+  alias Coherence.ControllerHelpers, as: Helpers

   @dialyzer [
     {:nowarn_function, update: 2},
@@ -26,9 +22,19 @@
   plug Coherence.ValidateOption, :registerable
   plug :scrub_params, "registration" when action in [:create, :update]

-  plug :layout_view, view: Coherence.RegistrationView
+  plug :set_layout_view
   plug :redirect_logged_in when action in [:new, :create]

+  def set_layout_view(conn, _ \\ []) do
+    conn
+    |> put_view(Coherence.RegistrationView)
+    |> put_layout({Coherence.LayoutView, "app.html"})
+  end
+
+  @type schema :: Ecto.Schema.t
+  @type conn :: Plug.Conn.t
+  @type params :: Map.t
+
   @doc """
   Render the new user form.
   """
@@ -36,7 +42,8 @@
   def new(conn, _params) do
     user_schema = Config.user_schema
     cs = Helpers.changeset(:registration, user_schema, user_schema.__struct__)
-    render(conn, :new, email: "", changeset: cs)
+    conn
+    |> render(:new, email: "", changeset: cs)
   end

   @doc """
@@ -47,15 +54,14 @@
   """
   @spec create(conn, params) :: conn
   def create(conn, %{"registration" => registration_params} = params) do
-    user_schema = Config.user_schema
-    cs = Helpers.changeset(:registration, user_schema, user_schema.__struct__, registration_params)
-    case Config.repo.insert(cs) do
+    case UcxChat.UserService.insert_user(params["registration"]) do
       {:ok, user} ->
+        Logger.warn "user: #{inspect user}"
         conn
-        |> send_confirmation(user, user_schema)
-        |> redirect_or_login(user, params, Config.allow_unconfirmed_access_for)
-      {:error, changeset} ->
-        render(conn, "new.html", changeset: changeset)
+        # |> send_confirmation(user, user_schema)
+        |> redirect(to: logged_out_url(conn))
+      {:error, :user, error, _} ->
+        render conn, "new.html", changeset: error
     end
   end

@@ -96,11 +102,11 @@
     user = Coherence.current_user(conn)
     changeset = Helpers.changeset(:registration, user_schema, user, user_params)

-    case Config.repo().update(changeset) do
+    case Config.repo.update(changeset) do
       {:ok, user} ->
         Config.auth_module
         |> apply(Config.update_login, [conn, user, [id_key: Config.schema_key]])
-        |> put_flash(:info, dgettext("coherence", "Account updated successfully."))
+        |> put_flash(:info, "Account updated successfully.")
         |> redirect_to(:registration_update, params, user)
       {:error, changeset} ->
         render(conn, "edit.html", user: user, changeset: changeset)
diff -Nur ./session_controller.ex /Users/spallen/myprojects/elixir/ucx_chat/web/controllers/coherence/session_controller.ex
--- ./session_controller.ex	2017-05-10 12:49:12.000000000 -0400
+++ /Users/spallen/myprojects/elixir/ucx_chat/web/controllers/coherence/session_controller.ex	2017-05-10 11:50:03.000000000 -0400
@@ -1,28 +1,27 @@
-defmodule InfinityOneWeb.Coherence.SessionController do
+defmodule UcxChat.Coherence.SessionController do
   @moduledoc """
   Handle the authentication actions.

   """
-  use InfinityOneWeb.Coherence, :controller
-
-  import Coherence.TrackableService
-  import Coherence.Rememberable, only: [hash: 1, gen_cookie: 3]
-
+  use Coherence.Web, :controller
+  use Timex
+  require Logger
   alias Coherence.{Rememberable}
+  use Coherence.Config
+  import Ecto.Query
+  import Rememberable, only: [hash: 1, gen_cookie: 3]
+  alias Coherence.ControllerHelpers, as: Helpers
   alias Coherence.{ConfirmableService}
+  import Coherence.TrackableService
+  import UcxChat.Gettext

-  require Logger
+  plug :layout_view, view: Coherence.SessionView
+  plug :redirect_logged_in when action in [:new, :create]

   @type schema :: Ecto.Schema.t
   @type conn :: Plug.Conn.t
   @type params :: Map.t

-  @flash_invalid dgettext("coherence", "Incorrect %{login_field} or password.", login_field: Config.login_field)
-  @flash_locked dgettext("coherence", "Maximum Login attempts exceeded. Your account has been locked.")
-
-  plug :layout_view, view: Coherence.SessionView
-  plug :redirect_logged_in when action in [:new, :create]
-
   @doc false
   @spec login_cookie() :: String.t
   def login_cookie, do: "coherence_login"
@@ -36,7 +35,7 @@
   end

   defp rememberable_enabled? do
-    if Config.user_schema.rememberable?(), do: true, else: false
+    if Config.user_schema.rememberable?, do: true, else: false
   end

   @doc """
@@ -44,7 +43,7 @@
   """
   @spec new(conn, params) :: conn
   def new(conn, _params) do
-    login_field = Config.login_field()
+    login_field = Config.login_field
     conn
     |> put_view(Coherence.SessionView)
     |> render(:new, [{login_field, ""}, remember: rememberable_enabled?()])
@@ -81,6 +80,7 @@
     login_field_str = to_string login_field
     login = params["session"][login_field_str]
     password = params["session"]["password"]
+    # user = Config.repo.one(from u in user_schema, where: field(u, ^login_field) == ^login)
     user = Config.repo.one(from u in user_schema, where: u.username == ^login or u.email == ^login)
     lockable? = user_schema.lockable?
     if user != nil and user.active and user_schema.checkpw(password, Map.get(user, Config.password_hash)) do
@@ -100,24 +100,24 @@
           |> reset_failed_attempts(user, lockable?)
           |> track_login(user, user_schema.trackable?, user_schema.trackable_table?)
           |> save_rememberable(user, remember)
-          |> put_flash(:notice, dgettet("coherence", "Signed in successfully."))
+          |> put_flash(:notice, "Signed in successfully.")
           |> redirect_to(:session_create, params)
         else
           conn
-          |> put_flash(:error, dgettet("coherence", "Too many failed login attempts. Account has been locked."))
+          |> put_flash(:error, "Too many failed login attempts. Account has been locked.")
           |> assign(:locked, true)
           |> put_status(423)
           |> render("new.html", [{login_field, ""}, remember: rememberable_enabled?()])
         end
       else
         conn
-        |> put_flash(:error, dgettext("coherence", "You must confirm your account before you can login."))
+        |> put_flash(:error, "You must confirm your account before you can login.")
         |> put_status(406)
         |> render("new.html", [{login_field, login}, remember: rememberable_enabled?()])
       end
     else
       conn
-      |> track_failed_login(user, user_schema.trackable_table?())
+      |> track_failed_login(user, user_schema.trackable_table?)
       |> failed_login(user, lockable?)
       |> put_view(Coherence.SessionView)
       |> put_layout("app.html")
@@ -133,8 +133,7 @@
   """
   @spec delete(conn, params) :: conn
   def delete(conn, params) do
-    conn
-    |> logout_user
+    logout_user(conn)
     |> redirect_to(:session_delete, params)
   end

@@ -142,10 +141,9 @@
   # Delete the user session.
   # """
   # def delete(conn) do
-  #   user = conn.assigns[Config.assigns_key()]
-  #   Config.auth_module()
-  #   |> apply(Config.delete_login(), [conn])
-  #   |> track_logout(user, user.__struct__.trackable?())
+  #   user = conn.assigns[Config.assigns_key]
+  #   apply(Config.auth_module, Config.delete_login, [conn])
+  #   |> track_logout(user, user.__struct__.trackable?)
   #   |> delete_rememberable(user)
   # end

@@ -160,8 +158,7 @@

   @spec reset_failed_attempts(conn, Ecto.Schema.t, boolean) :: conn
   def reset_failed_attempts(conn, %{failed_attempts: attempts} = user, true) when attempts > 0 do
-    :session
-    |> Helpers.changeset(user.__struct__, user, %{failed_attempts: 0})
+    Helpers.changeset(:session, user.__struct__, user, %{failed_attempts: 0})
     |> Config.repo.update
     |> log_lockable_update
     conn
@@ -171,12 +168,12 @@
   defp failed_login(conn, %{} = user, true) do
     attempts = user.failed_attempts + 1
     {conn, flash, params} =
-      if attempts >= Config.max_failed_login_attempts() do
+      if attempts >= Config.max_failed_login_attempts do
         new_conn =
           conn
           |> assign(:locked, true)
-          |> track_lock(user, user.__struct__.trackable_table?())
-        {new_conn, @flash_locked, %{locked_at: Ecto.DateTime.utc()}}
+          |> track_lock(user, user.__struct__.trackable_table?)
+        {new_conn, @flash_locked, %{locked_at: Ecto.DateTime.utc}}
       else
         if user.active do
           {conn, @flash_invalid, %{}}
@@ -184,8 +181,8 @@
           {conn, @flash_inactive, %{}}
         end
       end
-    :session
-    |> Helpers.changeset(user.__struct__, user, Map.put(params, :failed_attempts, attempts))
+
+    Helpers.changeset(:session, user.__struct__, user, Map.put(params, :failed_attempts, attempts))
     |> Config.repo.update
     |> log_lockable_update

@@ -219,18 +216,39 @@
   @spec rememberable_callback(conn, integer, String.t, String.t, Keyword.t) :: conn
   def rememberable_callback(conn, id, series, token, opts) do
     Coherence.RememberableServer.callback fn ->
-      do_rememberable_callback(conn, id, series, token, opts)
+      _rememberable_callback(conn, id, series, token, opts)
     end
   end

   @doc false
-  def do_rememberable_callback(conn, id, series, token, opts) do
-    case validate_login(id, series, token) do
+  @spec _rememberable_callback(conn, integer, String.t, String.t, Keyword.t) :: conn | {:errror, atom} | {conn, schema | nil}
+  def _rememberable_callback(conn, id, series, token, opts) do
+    repo = Config.repo
+    cred_store = Coherence.Authentication.Utils.get_credential_store
+    validate_login(id, series, token)
+    |> case do
       {:ok, rememberable} ->
         # Logger.debug "Valid login :ok"
-        Config.user_schema()
-        |> Config.repo().get(id)
-        |> do_valid_login(conn, [id, rememberable, series, token], opts)
+        case repo.get(Config.user_schema, id) do
+          nil -> {:error, :not_found}
+          user ->
+            if Config.async_rememberable? and Enum.any?(conn.req_headers, fn {k,v} -> k == "x-requested-with" and v == "XMLHttpRequest" end) do
+              # for ajax requests, we don't update the sequence number, ensuring that
+              # multiple concurrent ajax requests don't fail on the seq_no
+              {assign(conn, :remembered, true), user}
+            else
+              gen_cookie(id, series, token)
+              |> cred_store.delete_credentials
+              {changeset, new_token} = Rememberable.update_login(rememberable)
+
+              cred_store.put_credentials({gen_cookie(id, series, new_token), Config.user_schema, Config.schema_key})
+
+              Config.repo.update! changeset
+              conn = save_login_cookie(conn, id, series, new_token, opts[:login_key], opts[:cookie_expire])
+              |> assign(:remembered, true)
+              {conn, user}
+            end
+        end
       {:error, :not_found} ->
         Logger.debug "No valid login found"
         {conn, nil}
@@ -240,63 +258,28 @@

         conn
         |> delete_req_header(opts[:login_key])
-        |> put_flash(:error, dgettext("coherence", """
+        |> put_flash(:error, """
           You are using an invalid security token for this site! This security
           violation has been logged.
-          """))
+          """)
         |> redirect(to: logged_out_url(conn))
         |> halt
     end
   end

-  defp do_valid_login(nil, _conn, _parms, _opts),
-    do: {:error, :not_found}
-  defp do_valid_login(user, conn, params, opts) do
-    [id, rememberable, series, token] = params
-    cred_store = Coherence.Authentication.Utils.get_credential_store()
-    if Config.async_rememberable?() and Enum.any?(conn.req_headers,
-      fn {k,v} -> k == "x-requested-with" and v == "XMLHttpRequest" end) do
-      # for ajax requests, we don't update the sequence number, ensuring that
-      # multiple concurrent ajax requests don't fail on the seq_no
-      {assign(conn, :remembered, true), user}
-    else
-      id
-      |> gen_cookie(series, token)
-      |> cred_store.delete_credentials
-      {changeset, new_token} = Rememberable.update_login(rememberable)
-
-      cred_store.put_credentials({gen_cookie(id, series, new_token), Config.user_schema(), Config.schema_key()})
-
-      Config.repo.update! changeset
-
-      conn =
-        conn
-        |> save_login_cookie(id, series, new_token, opts)
-        |> assign(:remembered, true)
-
-      {conn, user}
-    end
-  end
-
   @doc """
   Save the login cookie.
   """
-  @spec save_login_cookie(conn, Integer.t, String.t, String.t, Keyword.t) :: conn
-  def save_login_cookie(conn, id, series, token, opts \\ []) do
-    key = opts[:login_key] || "coherence_login"
-    expire = opts[:cookie_expire] || (2 * 24 * 60 * 60)
+  @spec save_login_cookie(conn, integer, String.t, String.t, String.t, integer) :: conn
+  def save_login_cookie(conn, id, series, token, key \\ "coherence_login", expire \\ 2 * 24 * 60 * 60) do
     put_resp_cookie conn, key, gen_cookie(id, series, token), max_age: expire
   end

   defp save_rememberable(conn, _user, none) when none in [nil, false], do: conn
   defp save_rememberable(conn, user, _) do
     {changeset, series, token} = Rememberable.create_login(user)
-    Config.repo().insert! changeset
-    opts = [
-      login_key: Config.login_cookie(),
-      cookie_expire: Config.rememberable_cookie_expire_hours() * 60 * 60
-    ]
-    save_login_cookie conn, user.id, series, token, opts
+    Config.repo.insert! changeset
+    save_login_cookie conn, user.id, series, token, Config.login_cookie, Config.rememberable_cookie_expire_hours * 60 * 60
   end

   @doc """
@@ -325,15 +308,13 @@
   def validate_login(user_id, series, token) do
     hash_series = hash series
     hash_token = hash token
-    repo = Config.repo()
+    repo = Config.repo

-    # TODO: move this to the RememberableServer. But first, we need to change the
-    #       logic below to ignore expired tokens
-    delete_expired_tokens!(repo)
+    delete_expired_tokens!(repo)   # TODO: move the following to an task

     with :ok <- get_invalid_login!(repo, user_id, hash_series, hash_token),
          {:ok, rememberable} <- get_valid_login!(repo, user_id, hash_series, hash_token),
-      do: {:ok, rememberable}
+           do: {:ok, rememberable}
   end

   defp get_invalid_login!(repo, user_id, series, token) do
@@ -353,7 +334,7 @@
   end

   defp delete_expired_tokens!(repo) do
-    repo.delete_all Rememberable.delete_expired_tokens()
+    repo.delete_all Rememberable.delete_expired_tokens
   end

 end
diff -Nur ./unlock_controller.ex /Users/spallen/myprojects/elixir/ucx_chat/web/controllers/coherence/unlock_controller.ex
--- ./unlock_controller.ex	2017-05-02 16:45:29.000000000 -0400
+++ /Users/spallen/myprojects/elixir/ucx_chat/web/controllers/coherence/unlock_controller.ex	2017-05-09 15:08:28.000000000 -0400
@@ -1,4 +1,4 @@
-defmodule InfinityOneWeb.Coherence.UnlockController do
+defmodule UcxChat.Coherence.UnlockController do
   @moduledoc """
   Handle unlock_with_token actions.

@@ -7,20 +7,21 @@

   Basic locking and unlocking does not use this controller.
   """
-  use InfinityOneWeb.Coherence, :controller
-
+  use Coherence.Web, :controller
+  require Logger
+  use Timex
+  use Coherence.Config
+  alias Coherence.ControllerHelpers, as: Helpers
   alias Coherence.{TrackableService, LockableService}

-  require Logger
+  plug Coherence.ValidateOption, :unlockable_with_token
+  plug :layout_view
+  plug :redirect_logged_in when action in [:new, :create, :edit]

   @type schema :: Ecto.Schema.t
   @type conn :: Plug.Conn.t
   @type params :: Map.t

-  plug Coherence.ValidateOption, :unlockable_with_token
-  plug :layout_view, view: Coherence.UnlockView
-  plug :redirect_logged_in when action in [:new, :create, :edit]
-
   @doc """
   Render the send reset link form.
   """
@@ -36,7 +37,7 @@
   """
   @spec create(conn, params) :: conn
   def create(conn, %{"unlock" => unlock_params} = params) do
-    user_schema = Config.user_schema()
+    user_schema = Config.user_schema
     email = unlock_params["email"]
     password = unlock_params["password"]

@@ -51,11 +52,11 @@
           if user_schema.locked?(user) do
             send_user_email :unlock, user, router_helpers().unlock_url(conn, :edit, user.unlock_token)
             conn
-            |> put_flash(:info, dgettext("coherence", "Unlock Instructions sent."))
+            |> put_flash(:info, "Unlock Instructions sent.")
             |> redirect_to(:unlock_create, params)
           else
             conn
-            |> put_flash(:error, dgettext("coherence", "Your account is not locked."))
+            |> put_flash(:error, "Your account is not locked.")
             |> redirect_to(:unlock_create_not_locked, params)
           end
         {:error, changeset} ->
@@ -63,7 +64,7 @@
       end
     else
       conn
-      |> put_flash(:error, dgettext("coherence", "Invalid email or password."))
+      |> put_flash(:error, "Invalid email or password.")
       |> redirect_to(:unlock_create_invalid, params)
     end
   end
@@ -75,26 +76,25 @@
   def edit(conn, params) do
     user_schema = Config.user_schema
     token = params["id"]
-    unlock =
-      user_schema
-      |> where([u], u.unlock_token == ^token)
-      |> Config.repo.one
-    case unlock do
+    user_schema
+    |> where([u], u.unlock_token == ^token)
+    |> Config.repo.one
+    |> case do
       nil ->
         conn
-        |> put_flash(:error, dgettext("coherence", "Invalid unlock token."))
+        |> put_flash(:error, "Invalid unlock token.")
         |> redirect_to(:unlock_edit_invalid, params)
       user ->
         if user_schema.locked? user do
           Helpers.unlock! user
           conn
           |> TrackableService.track_unlock_token(user, user_schema.trackable_table?)
-          |> put_flash(:info, dgettext("coherence", "Your account has been unlocked"))
+          |> put_flash(:info, "Your account has been unlocked")
           |> redirect_to(:unlock_edit, params)
         else
           clear_unlock_values(user, user_schema)
           conn
-          |> put_flash(:error, dgettext("coherence", "Account is not locked."))
+          |> put_flash(:error, "Account is not locked.")
           |> redirect_to(:unlock_edit_not_locked, params)
         end
     end
@@ -105,15 +105,12 @@
   def clear_unlock_values(user, user_schema) do
     if user.unlock_token or user.locked_at do
       user_schema.changeset(user, %{unlock_token: nil, locked_at: nil})
-      schema =
-        :unlock
-        |> Helpers.changeset(user.__struct__, user, %{unlock_token: nil, locked_at: nil})
-        |> Config.repo.update
-      case schema do
+      Helpers.changeset(:unlock, user.__struct__, user, %{unlock_token: nil, locked_at: nil})
+      |> Config.repo.update
+      |> case do
         {:error, changeset} ->
           lockable_failure changeset
-        _ ->
-          :ok
+        _ -> :ok
       end
     end
   end
